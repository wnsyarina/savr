
import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';
import { toast } from 'sonner';

// Define user types
export type UserRole = 'business' | 'customer';

export interface User {
  id: string;
  email: string;
  name: string;
  role: UserRole;
  businessName?: string;
  businessAddress?: string;
}

// Mock users for demo
const MOCK_USERS: User[] = [
  {
    id: '1',
    email: 'business@example.com',
    name: 'Business Owner',
    role: 'business',
    businessName: 'Fresh Bakery',
    businessAddress: '123 Main St'
  },
  {
    id: '2',
    email: 'customer@example.com',
    name: 'John Customer',
    role: 'customer'
  }
];

interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<void>;
  register: (userData: Partial<User>, password: string) => Promise<void>;
  logout: () => void;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Check if user is already logged in
  useEffect(() => {
    const storedUser = localStorage.getItem('foodAppUser');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const login = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Find user (mock authentication)
      const foundUser = MOCK_USERS.find(u => u.email === email);
      
      if (!foundUser) {
        throw new Error('Invalid credentials');
      }
      
      // Store user in local storage
      localStorage.setItem('foodAppUser', JSON.stringify(foundUser));
      setUser(foundUser);
      toast.success('Login successful');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
      toast.error('Login failed');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (userData: Partial<User>, password: string) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Check if email already exists
      if (MOCK_USERS.some(u => u.email === userData.email)) {
        throw new Error('Email already in use');
      }
      
      // Create new user (in a real app, this would be an API call)
      const newUser: User = {
        id: `${MOCK_USERS.length + 1}`, // In real app, would be generated by backend
        email: userData.email || '',
        name: userData.name || '',
        role: userData.role || 'customer',
        businessName: userData.businessName,
        businessAddress: userData.businessAddress
      };
      
      // Store user in local storage
      localStorage.setItem('foodAppUser', JSON.stringify(newUser));
      setUser(newUser);
      toast.success('Registration successful');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
      toast.error('Registration failed');
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('foodAppUser');
    setUser(null);
    toast.success('You have been logged out');
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        error,
        login,
        register,
        logout,
        isAuthenticated: !!user
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
